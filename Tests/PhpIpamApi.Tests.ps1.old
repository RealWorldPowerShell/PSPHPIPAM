Context "PSPHPIPAM API Test" -tag "API" {
    Import-Module "$PSScriptRoot\..\PSPHPIPAM.psm1"
    try {
        Invoke-WebRequest -Uri 'http://127.0.0.1:8080' -ErrorAction stop | out-null
    } catch {
        $script:PSDefaultParameterValues=@{
            'It:Skip' = $true
        }
    }
    Describe "PhpIpamSession" {
        context "Cred Auth" -Tag API {

            It "New-PhpIpamSession using cred auth" {
                New-PhpIpamSession -useCredAuth -PhpIpamApiUrl http://127.0.0.1:8080/api -AppID script -userName admin -password password | Should -Be true
            }

            it "Test-PhpIpamToken to check token" {
                Test-PhpIpamToken | should -be 'Valid'
            }

            it "Expand-PhpIpamTokenLife works with cred auth" {
                Expand-PhpIpamTokenLife | should -Not -BeNullOrEmpty
            }
            it "Query all user to check Invoke-PhpIpamExecute and token validation" {
                { $script:tempresult = Invoke-PhpIpamExecute -method get -controller user -identifiers @('all') } | should -Not -throw
                $script:tempresult.code | should -be 200
            }
            Context "API Test" -tag API {
                it "<method> <url> <desc>" {
                    param(
                        $method,
                        $controller,
                        $identifier = @(),
                        $url,
                        $desc,
                        $params = @{ },
                        $precode = { },
                        $endcode = { }
                    )

                    $tempParams = @{
                        method     = $method
                        controller = $controller
                        identifier = $identifier
                        params     = $params
                    }
                    $precode.invoke()
                    $script:tempresult = invoke-phpIpamExecute @tempParams -ErrorAction Stop
                    $script:tempresult.code | should -BeGreaterOrEqual 200
                    $script:tempresult.code | should -BeLessThan 400
                    $endcode.invoke()
                } -testcases @(
                    ################### Sections ######################
                    @{  method     = 'get'
                        controller = 'sections'
                        identifier = @()
                        url        = "/api/my_app/sections/"
                        desc       = "get all sections"
                    },
                    @{  method     = 'get'
                        controller = 'sections'
                        identifier = @(2)
                        url        = "/api/my_app/sections/{id}"
                        desc       = "Returns specific section which section id is 2"
                    },
                    @{  method     = 'get'
                        controller = 'sections'
                        identifier = @(2, 'subnets')
                        url        = "/api/my_app/sections/{id}/subnets"
                        desc       = "Returns all subnets in section 2"
                    },
                    @{  method     = 'get'
                        controller = 'sections'
                        identifier = @('ipv6')
                        url        = "/api/my_app/sections/{name}/"
                        desc       = "Returns specific section by name='ipv6'"
                    },
                    @{  method     = 'get'
                        controller = 'sections';
                        identifier = @('custom_fields')
                        url        = "/api/my_app/sections/custom_fields/"
                        desc       = "Returns custom section fields"
                    },
                    @{  method     = 'post'
                        controller = 'sections';
                        url        = "/api/my_app/sections/"
                        desc       = "Creates new section name=section1"
                        params     = @{name = "section1" }
                        endcode    = {
                            write-host ($script:tempresult | out-string)
                            $script:sectionid = $script:tempresult.id
                        }

                    },
                    @{  method     = 'patch'
                        controller = 'sections';
                        url        = "/api/my_app/sections/"
                        desc       = "update section description"
                        precode    = {
                            $params = @{
                                id          = $script:sectionid
                                description = "test"
                            }
                        }
                    },
                    @{  method     = 'delete'
                        controller = 'sections';
                        url        = "/api/my_app/sections/"
                        desc       = "remove section"
                        precode    = {
                            $params = @{
                                id = $script:sectionid
                            }
                        }
                        endcode    = { Remove-Variable -name sectionid }
                    },

                    ###################### Subnets ##################
                    @{
                        method     = 'get'
                        controller = 'subnets'
                        identifier = @(1)
                        url        = "/api/my_app/subnets/1"
                        desc       = "get subnects by id 1"

                    },
                    @{
                        method     = 'get'
                        controller = 'subnets'
                        identifier = @(1, 'usage')
                        url        = "/api/my_app/subnets/1/usage"
                        desc       = "get subnet id=1 usage"
                    },
                    @{
                        method     = 'get'
                        controller = 'subnets'
                        identifier = @(1, 'slaves')
                        url        = "/api/my_app/subnets/1/slaves"
                        desc       = "get subnet id=1 slaves"
                    },
                    @{
                        method     = 'get'
                        controller = 'subnets'
                        identifier = @(1, 'slaves_recursive')
                        url        = "/api/my_app/subnets/1/slaves_recursive"
                        desc       = "get subnet id=1 slaves recurse"
                    },
                    @{
                        method     = 'get'
                        controller = 'subnets'
                        identifier = @(1, 'addresses')
                        url        = "/api/my_app/subnets/1/addresses"
                        desc       = "get subnet id=1 addresses"
                    },
                    @{
                        method     = 'get'
                        controller = 'subnets'
                        identifier = @(1, 'addresses', 'fd13:6d20:29dc:cf27::1')
                        url        = "/api/my_app/subnets/1/fd13:6d20:29dc:cf27::1"
                        desc       = "get ipv6 address=fd13:6d20:29dc:cf27::1 in subnets 1"
                    }
                    @{
                        method     = 'get'
                        controller = 'subnets'
                        identifier = @(1, 'first_subnet', 64)
                        url        = "/api/my_app/subnets/1/first_subnet/64"
                        desc       = "get subnetid=64 under subnet id=1"
                    },
                    @{
                        method     = 'get'
                        controller = 'subnets'
                        identifier = @(2, 'all_subnets', 24)
                    },
                    @{
                        method     = 'get'
                        controller = 'subnets'
                        identifier = @('custom_fields')
                    },
                    @{
                        method     = 'get'
                        controller = 'subnets'
                        identifier = @('cidr', '10.65.22.0/24')
                    },
                    @{
                        method     = 'get'
                        controller = 'subnets'
                        identifier = @('search', '10.65.22.0/24')
                    },
                    @{  method     = 'post'
                        controller = 'subnets';
                        url        = "/api/my_app/subnets/{id}/first_subnet/{mask}/"
                        desc       = "Creates new section"
                        params     = @{sectionId = 1; subnet = '192.168.9.0'; mask = 24 }
                    },
                    @{
                        method = 'get'; controller = 'addresses'; identifier = @(1)
                    },
                    @{
                        method     = 'get'
                        controller = 'addresses'
                        identifier = @(1, 'ping')
                    },
                    @{
                        method     = 'get'
                        controller = 'addresses'
                        identifier = @(1, 1)
                    },
                    @{
                        method     = 'get'
                        controller = 'addresses'
                        identifier = @('search', '10.65.22.1')
                    },
                    @{
                        method     = 'get'
                        controller = 'addresses'
                        identifier = @('search_hostname', 'test1')
                    },
                    @{
                        method     = 'get'
                        controller = 'addresses'
                        identifier = @('first_free', 1)
                    },
                    @{
                        method     = 'get'
                        controller = 'addresses'
                        identifier = @('custom_fields')
                    },
                    @{
                        method     = 'get'
                        controller = 'addresses'
                        identifier = @('tags')
                    },
                    @{
                        method     = 'get'
                        controller = 'addresses'
                        identifier = @('tags', 1)
                    },
                    @{
                        method     = 'get'
                        controller = 'addresses'
                        identifier = @('tags', 2, 'addresses')
                    }
                )
            }
        }

        if ($PSVersionTable.PSEdition -ne 'Core') {
            context "Encryped request" -tag API {
                It "new-phpipamsession auth using encryped request" {
                    New-PhpIpamSession -useAppkeyAuth -PhpIpamApiUrl http://127.0.0.1:8080/api -AppID script -Appkey '5f40c5ba5730bdb93ca561efe5bae433' | Should Be true
                }

                it "Expand-PhpIpamTokenLife works after encryped request" {
                    Expand-PhpIpamTokenLife | should  BeNullOrEmpty
                }

                it "query all user" {
                    { $script:tempresult = Invoke-PhpIpamExecute -method get -controller user -identifiers @('all') } | should not  throw
                    $script:tempresult.code | should not BeNullOrEmpty
                }
            }
        }
    }
}



